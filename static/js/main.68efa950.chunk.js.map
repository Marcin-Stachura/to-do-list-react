{"version":3,"sources":["Form/index.js","Tasks/index.js","HeaderButtons/index.js","Section/index.js","Header/index.js","Main/index.js","App.js","serviceWorker.js","index.js"],"names":["Form","addNewTask","useState","newTaskName","setNewTaskName","className","onSubmit","event","preventDefault","trim","value","onChange","target","autoFocus","placeholder","Tasks","tasks","hideDoneTasks","toggleDoneTask","removeTask","map","task","key","id","taskDone","onClick","undefined","taskName","HeaderButtons","toggleHideDoneTasks","setAllTasksDone","length","disabled","every","Section","title","body","extraHeaderContent","Header","Main","children","App","setHideDoneTasks","setTasks","filter","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.68efa950.chunk.js","sourcesContent":["import React, { useState } from \"react\";\r\nimport \"./style.css\";\r\n\r\nconst Form = ({ addNewTask }) => {\r\n    const [newTaskName, setNewTaskName] = useState(\"\");\r\n\r\n    const onFormSubmit = (event) => {\r\n        event.preventDefault();\r\n        addNewTask(newTaskName.trim());\r\n        setNewTaskName(\"\");\r\n    };\r\n\r\n    return (\r\n        <form\r\n            className=\"form\"\r\n            onSubmit={onFormSubmit}\r\n        >\r\n            <input\r\n                value={newTaskName}\r\n                onChange={({ target }) => setNewTaskName(target.value)}\r\n                className=\"form__input\"\r\n                autoFocus\r\n                placeholder=\"New task name...\" />\r\n            <button className=\"form__button\">Add task</button>\r\n        </form>\r\n    )\r\n};\r\n\r\nexport default Form;","import React from \"react\";\r\nimport \"./style.css\";\r\n\r\nconst Tasks = ({ tasks, hideDoneTasks, toggleDoneTask, removeTask }) => (\r\n  <ul className=\"tasks\">\r\n    {tasks.map(task => (\r\n      <li\r\n        key={task.id}\r\n        className={`tasks__task\r\n          ${task.taskDone ? \" tasks__task--done\" : \"\"}\r\n          ${(hideDoneTasks && task.taskDone) ? \" tasks__task--hidden\" : \"\"}\r\n          `}\r\n      >\r\n\r\n        <button\r\n          onClick={() => toggleDoneTask(task.id)}\r\n          className=\"tasks__button tasks__button--done\">\r\n          {task.taskDone ? \"âœ”\" : \"\"}\r\n        </button>\r\n\r\n        <span className={task.taskDone ? \"tasks__taskNameDone\" : undefined}>\r\n          {task.taskName}\r\n        </span>\r\n\r\n        <button\r\n          onClick={() => removeTask(task.id)}\r\n          className=\"tasks__button tasks__button--remove\">ðŸ—‘</button>\r\n\r\n      </li>\r\n    ))}\r\n  </ul>\r\n);\r\n\r\nexport default Tasks;","import React from \"react\";\r\nimport \"./style.css\";\r\n\r\nconst HeaderButtons = ({ tasks, hideDoneTasks, toggleHideDoneTasks, setAllTasksDone }) => (\r\n    <span className=\"headerButtons\">\r\n        {tasks.length > 0 && (\r\n            <>\r\n                <button\r\n                    onClick={toggleHideDoneTasks}\r\n                    className=\"headerButtons__button\">\r\n                    {hideDoneTasks ? \"Show \" : \"Hide \"}done tasks\r\n                </button>\r\n\r\n                <button\r\n                    onClick={setAllTasksDone}\r\n                    disabled={tasks.every(({ taskDone }) => taskDone)}\r\n                    className=\"headerButtons__button\">All tasks done!\r\n                </button>\r\n            </>\r\n        )}\r\n    </span>\r\n\r\n);\r\n\r\nexport default HeaderButtons;","import React from \"react\";\r\nimport \"./style.css\";\r\n\r\nconst Section = ({ title, body, extraHeaderContent }) => (\r\n    <section className=\"section\">\r\n        <div className=\"section__header\">\r\n            <span className=\"section__header--title\">{title}</span>\r\n            {extraHeaderContent}\r\n        </div>\r\n        <div className=\"section__body\">\r\n            {body}\r\n        </div>\r\n    </section>\r\n);\r\n\r\nexport default Section;","import React from \"react\";\r\nimport \"./style.css\";\r\n\r\nconst Header = ({title}) => (\r\n    <header>\r\n    <div className=\"header\">{title}</div>\r\n  </header>\r\n);\r\n\r\nexport default Header;","import React from \"react\";\r\nimport \"./style.css\"\r\n\r\nconst Main = ({ children }) => (\r\n    <main className=\"main\">\r\n        {children}\r\n    </main>\r\n);\r\n\r\nexport default Main;","import React, { useState } from \"react\";\nimport Form from \"./Form\";\nimport Tasks from \"./Tasks\";\nimport HeaderButtons from \"./HeaderButtons\";\nimport Section from \"./Section\";\nimport Header from \"./Header\";\nimport Main from \"./Main\";\n\nfunction App() {\n\n  const [hideDoneTasks, setHideDoneTasks] = useState(false);\n  const [tasks, setTasks] = useState([]);\n\n  const toggleHideDoneTasks = () => {\n    setHideDoneTasks(hideDoneTasks => !hideDoneTasks);\n  };\n\n  const setAllTasksDone = () => {\n    setTasks(tasks => tasks.map(task => (\n      {\n        ...task,\n        taskDone: true,\n      })));\n  };\n\n  const toggleDoneTask = (id) => {\n    setTasks(tasks => tasks.map(task => {\n      if (task.id === id)\n        return {\n          ...task,\n          taskDone: !task.taskDone,\n        };\n      return task;\n    }));\n  };\n\n  const removeTask = (id) => {\n    setTasks(tasks => tasks.filter(\n      task => task.id !== id,\n    ));\n  };\n\n  const addNewTask = (newTaskName) => {\n    setTasks(tasks => [\n      ...tasks,\n      {\n        id: tasks.length === 0 ? 1 : tasks[tasks.length - 1].id + 1,\n        taskName: newTaskName,\n        taskDone: false,\n      },\n    ]);\n  };\n\n  return (\n\n    <Main>\n\n      <Header\n        title=\"My to-do list\"\n      />\n\n      <Section\n        title=\"Add new task\"\n        body={<Form\n          addNewTask={addNewTask}\n        />}\n      />\n\n      <Section\n        title=\"Task list\"\n        extraHeaderContent={\n          <HeaderButtons\n            tasks={tasks}\n            hideDoneTasks={hideDoneTasks}\n            toggleHideDoneTasks={toggleHideDoneTasks}\n            setAllTasksDone={setAllTasksDone}\n          />}\n        body={\n          <Tasks\n            tasks={tasks}\n            hideDoneTasks={hideDoneTasks}\n            toggleDoneTask={toggleDoneTask}\n            removeTask={removeTask}\n          />}\n      />\n    </Main>\n\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}